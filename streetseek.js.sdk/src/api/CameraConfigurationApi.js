/**
 * Streetseek Server
 * streetseek.server
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Camera from '../model/Camera';
import CameraAppConfig from '../model/CameraAppConfig';
import CameraBody from '../model/CameraBody';
import CameraBuildConfig from '../model/CameraBuildConfig';
import CameraName from '../model/CameraName';

/**
* CameraConfiguration service.
* @module api/CameraConfigurationApi
* @version 1.0.0
*/
export default class CameraConfigurationApi {

    /**
    * Constructs a new CameraConfigurationApi. 
    * @alias module:api/CameraConfigurationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get camera details by ID.
     * @param {String} cameraId Numeric ID of camera
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CameraBody} and HTTP response
     */
    cameraConfigurationCameraCameraIdGetWithHttpInfo(cameraId) {
      let postBody = null;
      // verify the required parameter 'cameraId' is set
      if (cameraId === undefined || cameraId === null) {
        throw new Error("Missing the required parameter 'cameraId' when calling cameraConfigurationCameraCameraIdGet");
      }

      let pathParams = {
        'cameraId': cameraId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CameraBody;
      return this.apiClient.callApi(
        '/camera-configuration/camera/{cameraId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get camera details by ID.
     * @param {String} cameraId Numeric ID of camera
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CameraBody}
     */
    cameraConfigurationCameraCameraIdGet(cameraId) {
      return this.cameraConfigurationCameraCameraIdGetWithHttpInfo(cameraId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a cameras name by the ID.
     * @param {String} cameraId Numeric ID of camera
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CameraName} and HTTP response
     */
    cameraConfigurationCameraNameByIdCameraIdGetWithHttpInfo(cameraId) {
      let postBody = null;
      // verify the required parameter 'cameraId' is set
      if (cameraId === undefined || cameraId === null) {
        throw new Error("Missing the required parameter 'cameraId' when calling cameraConfigurationCameraNameByIdCameraIdGet");
      }

      let pathParams = {
        'cameraId': cameraId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CameraName;
      return this.apiClient.callApi(
        '/camera-configuration/camera/name/by/id/{cameraId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a cameras name by the ID.
     * @param {String} cameraId Numeric ID of camera
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CameraName}
     */
    cameraConfigurationCameraNameByIdCameraIdGet(cameraId) {
      return this.cameraConfigurationCameraNameByIdCameraIdGetWithHttpInfo(cameraId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all camera details.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CameraBody>} and HTTP response
     */
    cameraConfigurationCamerasGetWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CameraBody];
      return this.apiClient.callApi(
        '/camera-configuration/cameras', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all camera details.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CameraBody>}
     */
    cameraConfigurationCamerasGet() {
      return this.cameraConfigurationCamerasGetWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set an app config for a given camera.
     * @param {Object} opts Optional parameters
     * @param {module:model/CameraAppConfig} opts.cameraAppConfig 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    cameraConfigurationSetAppConfigPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['cameraAppConfig'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/camera-configuration/set-app-config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Set an app config for a given camera.
     * @param {Object} opts Optional parameters
     * @param {module:model/CameraAppConfig} opts.cameraAppConfig 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    cameraConfigurationSetAppConfigPost(opts) {
      return this.cameraConfigurationSetAppConfigPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set a build config for a given camera.
     * @param {Object} opts Optional parameters
     * @param {module:model/CameraBuildConfig} opts.cameraBuildConfig 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    cameraConfigurationSetBuildConfigPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['cameraBuildConfig'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/camera-configuration/set-build-config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Set a build config for a given camera.
     * @param {Object} opts Optional parameters
     * @param {module:model/CameraBuildConfig} opts.cameraBuildConfig 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    cameraConfigurationSetBuildConfigPost(opts) {
      return this.cameraConfigurationSetBuildConfigPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set up a new camera.
     * @param {Object} opts Optional parameters
     * @param {module:model/Camera} opts.camera 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    cameraConfigurationSetupCameraPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['camera'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/camera-configuration/setup-camera', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Set up a new camera.
     * @param {Object} opts Optional parameters
     * @param {module:model/Camera} opts.camera 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    cameraConfigurationSetupCameraPost(opts) {
      return this.cameraConfigurationSetupCameraPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
