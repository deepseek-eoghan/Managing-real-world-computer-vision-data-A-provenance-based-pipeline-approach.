/**
 * Streetseek Server
 * streetseek.server
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CameraInsights from '../model/CameraInsights';
import CameraPersonCount from '../model/CameraPersonCount';
import CameraSocialDistAvg from '../model/CameraSocialDistAvg';
import CameraTimeSpent from '../model/CameraTimeSpent';
import CameraWalkingPace from '../model/CameraWalkingPace';
import Heatmap from '../model/Heatmap';
import InlineObject from '../model/InlineObject';
import TotalCameraDensity from '../model/TotalCameraDensity';
import TotalCameraPersonCount from '../model/TotalCameraPersonCount';
import TotalCameraSocialDistanceAvg from '../model/TotalCameraSocialDistanceAvg';
import TotalCameraTimeSpent from '../model/TotalCameraTimeSpent';
import TotalCameraWalkingPace from '../model/TotalCameraWalkingPace';

/**
* CameraInsights service.
* @module api/CameraInsightsApi
* @version 1.0.0
*/
export default class CameraInsightsApi {

    /**
    * Constructs a new CameraInsightsApi. 
    * @alias module:api/CameraInsightsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Aggregate all metrics up to a day
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject} opts.inlineObject 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    cameraInsightsDailyAggregatorPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['inlineObject'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/camera-insights/daily-aggregator', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Aggregate all metrics up to a day
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject} opts.inlineObject 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    cameraInsightsDailyAggregatorPost(opts) {
      return this.cameraInsightsDailyAggregatorPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} _date Date to retrieve data from.
     * @param {String} cameraId Numeric ID of camera.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TotalCameraDensity} and HTTP response
     */
    cameraInsightsDensityAverageTotalForDayDateByCameraIdCameraIdGetWithHttpInfo(_date, cameraId) {
      let postBody = null;
      // verify the required parameter '_date' is set
      if (_date === undefined || _date === null) {
        throw new Error("Missing the required parameter '_date' when calling cameraInsightsDensityAverageTotalForDayDateByCameraIdCameraIdGet");
      }
      // verify the required parameter 'cameraId' is set
      if (cameraId === undefined || cameraId === null) {
        throw new Error("Missing the required parameter 'cameraId' when calling cameraInsightsDensityAverageTotalForDayDateByCameraIdCameraIdGet");
      }

      let pathParams = {
        'date': _date,
        'cameraId': cameraId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TotalCameraDensity;
      return this.apiClient.callApi(
        '/camera-insights/density/average/total/for/day/{date}/by/camera/id/{cameraId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} _date Date to retrieve data from.
     * @param {String} cameraId Numeric ID of camera.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TotalCameraDensity}
     */
    cameraInsightsDensityAverageTotalForDayDateByCameraIdCameraIdGet(_date, cameraId) {
      return this.cameraInsightsDensityAverageTotalForDayDateByCameraIdCameraIdGetWithHttpInfo(_date, cameraId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get total average density for each day between 2 dates.
     * @param {String} startDate First date to retrieve.
     * @param {String} endDate Last date in range.
     * @param {String} cameraId Numeric ID of camera.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TotalCameraDensity>} and HTTP response
     */
    cameraInsightsDensityAverageTotalPerDayBetweenDatesStartStartDateEndEndDateByCameraIdCameraIdGetWithHttpInfo(startDate, endDate, cameraId) {
      let postBody = null;
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling cameraInsightsDensityAverageTotalPerDayBetweenDatesStartStartDateEndEndDateByCameraIdCameraIdGet");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling cameraInsightsDensityAverageTotalPerDayBetweenDatesStartStartDateEndEndDateByCameraIdCameraIdGet");
      }
      // verify the required parameter 'cameraId' is set
      if (cameraId === undefined || cameraId === null) {
        throw new Error("Missing the required parameter 'cameraId' when calling cameraInsightsDensityAverageTotalPerDayBetweenDatesStartStartDateEndEndDateByCameraIdCameraIdGet");
      }

      let pathParams = {
        'startDate': startDate,
        'endDate': endDate,
        'cameraId': cameraId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TotalCameraDensity];
      return this.apiClient.callApi(
        '/camera-insights/density/average/total/per/day/between/dates/start/{startDate}/end/{endDate}/by/camera/id/{cameraId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get total average density for each day between 2 dates.
     * @param {String} startDate First date to retrieve.
     * @param {String} endDate Last date in range.
     * @param {String} cameraId Numeric ID of camera.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/TotalCameraDensity>}
     */
    cameraInsightsDensityAverageTotalPerDayBetweenDatesStartStartDateEndEndDateByCameraIdCameraIdGet(startDate, endDate, cameraId) {
      return this.cameraInsightsDensityAverageTotalPerDayBetweenDatesStartStartDateEndEndDateByCameraIdCameraIdGetWithHttpInfo(startDate, endDate, cameraId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} _date Date to retrieve data from.
     * @param {String} cameraId Numeric ID of camera.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Heatmap} and HTTP response
     */
    cameraInsightsHeatmapTotalForDayDateByCameraIdCameraIdGetWithHttpInfo(_date, cameraId) {
      let postBody = null;
      // verify the required parameter '_date' is set
      if (_date === undefined || _date === null) {
        throw new Error("Missing the required parameter '_date' when calling cameraInsightsHeatmapTotalForDayDateByCameraIdCameraIdGet");
      }
      // verify the required parameter 'cameraId' is set
      if (cameraId === undefined || cameraId === null) {
        throw new Error("Missing the required parameter 'cameraId' when calling cameraInsightsHeatmapTotalForDayDateByCameraIdCameraIdGet");
      }

      let pathParams = {
        'date': _date,
        'cameraId': cameraId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Heatmap;
      return this.apiClient.callApi(
        '/camera-insights/heatmap/total/for/day/{date}/by/camera/id/{cameraId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} _date Date to retrieve data from.
     * @param {String} cameraId Numeric ID of camera.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Heatmap}
     */
    cameraInsightsHeatmapTotalForDayDateByCameraIdCameraIdGet(_date, cameraId) {
      return this.cameraInsightsHeatmapTotalForDayDateByCameraIdCameraIdGetWithHttpInfo(_date, cameraId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get persons counted for a full day on a given date on an hourly interval.
     * @param {String} _date Date from which to retrieve data.
     * @param {String} cameraId Date from which to retrieve data.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CameraPersonCount>} and HTTP response
     */
    cameraInsightsPersonCountDateByHourByCameraIdCameraIdGetWithHttpInfo(_date, cameraId) {
      let postBody = null;
      // verify the required parameter '_date' is set
      if (_date === undefined || _date === null) {
        throw new Error("Missing the required parameter '_date' when calling cameraInsightsPersonCountDateByHourByCameraIdCameraIdGet");
      }
      // verify the required parameter 'cameraId' is set
      if (cameraId === undefined || cameraId === null) {
        throw new Error("Missing the required parameter 'cameraId' when calling cameraInsightsPersonCountDateByHourByCameraIdCameraIdGet");
      }

      let pathParams = {
        'date': _date,
        'cameraId': cameraId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CameraPersonCount];
      return this.apiClient.callApi(
        '/camera-insights/person-count/{date}/by/hour/by/camera/id/{cameraId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get persons counted for a full day on a given date on an hourly interval.
     * @param {String} _date Date from which to retrieve data.
     * @param {String} cameraId Date from which to retrieve data.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CameraPersonCount>}
     */
    cameraInsightsPersonCountDateByHourByCameraIdCameraIdGet(_date, cameraId) {
      return this.cameraInsightsPersonCountDateByHourByCameraIdCameraIdGetWithHttpInfo(_date, cameraId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get persons counted for a full day on a given date with a chosen minute based interval.
     * @param {String} _date Date to retrieve data from.
     * @param {Number} interval Interval of data number in range [5 ... 50]
     * @param {String} cameraId Numeric ID of camera.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CameraPersonCount>} and HTTP response
     */
    cameraInsightsPersonCountDateMinuteIntervalIntervalByCameraIdCameraIdGetWithHttpInfo(_date, interval, cameraId) {
      let postBody = null;
      // verify the required parameter '_date' is set
      if (_date === undefined || _date === null) {
        throw new Error("Missing the required parameter '_date' when calling cameraInsightsPersonCountDateMinuteIntervalIntervalByCameraIdCameraIdGet");
      }
      // verify the required parameter 'interval' is set
      if (interval === undefined || interval === null) {
        throw new Error("Missing the required parameter 'interval' when calling cameraInsightsPersonCountDateMinuteIntervalIntervalByCameraIdCameraIdGet");
      }
      // verify the required parameter 'cameraId' is set
      if (cameraId === undefined || cameraId === null) {
        throw new Error("Missing the required parameter 'cameraId' when calling cameraInsightsPersonCountDateMinuteIntervalIntervalByCameraIdCameraIdGet");
      }

      let pathParams = {
        'date': _date,
        'interval': interval,
        'cameraId': cameraId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CameraPersonCount];
      return this.apiClient.callApi(
        '/camera-insights/person-count/{date}/minute/interval/{interval}/by/camera/id/{cameraId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get persons counted for a full day on a given date with a chosen minute based interval.
     * @param {String} _date Date to retrieve data from.
     * @param {Number} interval Interval of data number in range [5 ... 50]
     * @param {String} cameraId Numeric ID of camera.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CameraPersonCount>}
     */
    cameraInsightsPersonCountDateMinuteIntervalIntervalByCameraIdCameraIdGet(_date, interval, cameraId) {
      return this.cameraInsightsPersonCountDateMinuteIntervalIntervalByCameraIdCameraIdGetWithHttpInfo(_date, interval, cameraId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get total persons counted for a given day based on a camera id.
     * @param {String} _date Date to retrieve data from.
     * @param {String} cameraId Numeric ID of camera.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TotalCameraPersonCount} and HTTP response
     */
    cameraInsightsPersonCountTotalForDayDateByCameraIdCameraIdGetWithHttpInfo(_date, cameraId) {
      let postBody = null;
      // verify the required parameter '_date' is set
      if (_date === undefined || _date === null) {
        throw new Error("Missing the required parameter '_date' when calling cameraInsightsPersonCountTotalForDayDateByCameraIdCameraIdGet");
      }
      // verify the required parameter 'cameraId' is set
      if (cameraId === undefined || cameraId === null) {
        throw new Error("Missing the required parameter 'cameraId' when calling cameraInsightsPersonCountTotalForDayDateByCameraIdCameraIdGet");
      }

      let pathParams = {
        'date': _date,
        'cameraId': cameraId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TotalCameraPersonCount;
      return this.apiClient.callApi(
        '/camera-insights/person-count/total/for/day/{date}/by/camera/id/{cameraId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get total persons counted for a given day based on a camera id.
     * @param {String} _date Date to retrieve data from.
     * @param {String} cameraId Numeric ID of camera.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TotalCameraPersonCount}
     */
    cameraInsightsPersonCountTotalForDayDateByCameraIdCameraIdGet(_date, cameraId) {
      return this.cameraInsightsPersonCountTotalForDayDateByCameraIdCameraIdGetWithHttpInfo(_date, cameraId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get total persons per day between 2 dates.
     * @param {String} startDate First date to retrieve.
     * @param {String} endDate Last date in range.
     * @param {String} cameraId Numeric ID of camera.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TotalCameraPersonCount>} and HTTP response
     */
    cameraInsightsPersonCountTotalPerDayBetweenDatesStartStartDateEndEndDateByCameraIdCameraIdGetWithHttpInfo(startDate, endDate, cameraId) {
      let postBody = null;
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling cameraInsightsPersonCountTotalPerDayBetweenDatesStartStartDateEndEndDateByCameraIdCameraIdGet");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling cameraInsightsPersonCountTotalPerDayBetweenDatesStartStartDateEndEndDateByCameraIdCameraIdGet");
      }
      // verify the required parameter 'cameraId' is set
      if (cameraId === undefined || cameraId === null) {
        throw new Error("Missing the required parameter 'cameraId' when calling cameraInsightsPersonCountTotalPerDayBetweenDatesStartStartDateEndEndDateByCameraIdCameraIdGet");
      }

      let pathParams = {
        'startDate': startDate,
        'endDate': endDate,
        'cameraId': cameraId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TotalCameraPersonCount];
      return this.apiClient.callApi(
        '/camera-insights/person-count/total/per/day/between/dates/start/{startDate}/end/{endDate}/by/camera/id/{cameraId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get total persons per day between 2 dates.
     * @param {String} startDate First date to retrieve.
     * @param {String} endDate Last date in range.
     * @param {String} cameraId Numeric ID of camera.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/TotalCameraPersonCount>}
     */
    cameraInsightsPersonCountTotalPerDayBetweenDatesStartStartDateEndEndDateByCameraIdCameraIdGet(startDate, endDate, cameraId) {
      return this.cameraInsightsPersonCountTotalPerDayBetweenDatesStartStartDateEndEndDateByCameraIdCameraIdGetWithHttpInfo(startDate, endDate, cameraId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get average social distance compliance for a full day on a given date with a chosen minute based interval.
     * @param {String} _date Date to retrieve data from.
     * @param {Number} interval Interval of data number in range [5 ... 50]
     * @param {String} cameraId Numeric ID of camera.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CameraSocialDistAvg>} and HTTP response
     */
    cameraInsightsSocialDistancingAverageDateMinuteIntervalIntervalByCameraIdCameraIdGetWithHttpInfo(_date, interval, cameraId) {
      let postBody = null;
      // verify the required parameter '_date' is set
      if (_date === undefined || _date === null) {
        throw new Error("Missing the required parameter '_date' when calling cameraInsightsSocialDistancingAverageDateMinuteIntervalIntervalByCameraIdCameraIdGet");
      }
      // verify the required parameter 'interval' is set
      if (interval === undefined || interval === null) {
        throw new Error("Missing the required parameter 'interval' when calling cameraInsightsSocialDistancingAverageDateMinuteIntervalIntervalByCameraIdCameraIdGet");
      }
      // verify the required parameter 'cameraId' is set
      if (cameraId === undefined || cameraId === null) {
        throw new Error("Missing the required parameter 'cameraId' when calling cameraInsightsSocialDistancingAverageDateMinuteIntervalIntervalByCameraIdCameraIdGet");
      }

      let pathParams = {
        'date': _date,
        'interval': interval,
        'cameraId': cameraId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CameraSocialDistAvg];
      return this.apiClient.callApi(
        '/camera-insights/social-distancing/average/{date}/minute/interval/{interval}/by/camera/id/{cameraId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get average social distance compliance for a full day on a given date with a chosen minute based interval.
     * @param {String} _date Date to retrieve data from.
     * @param {Number} interval Interval of data number in range [5 ... 50]
     * @param {String} cameraId Numeric ID of camera.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CameraSocialDistAvg>}
     */
    cameraInsightsSocialDistancingAverageDateMinuteIntervalIntervalByCameraIdCameraIdGet(_date, interval, cameraId) {
      return this.cameraInsightsSocialDistancingAverageDateMinuteIntervalIntervalByCameraIdCameraIdGetWithHttpInfo(_date, interval, cameraId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} _date Date to retrieve data from.
     * @param {String} cameraId Numeric ID of camera.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TotalCameraSocialDistanceAvg} and HTTP response
     */
    cameraInsightsSocialDistancingAverageTotalForDayDateByCameraIdCameraIdGetWithHttpInfo(_date, cameraId) {
      let postBody = null;
      // verify the required parameter '_date' is set
      if (_date === undefined || _date === null) {
        throw new Error("Missing the required parameter '_date' when calling cameraInsightsSocialDistancingAverageTotalForDayDateByCameraIdCameraIdGet");
      }
      // verify the required parameter 'cameraId' is set
      if (cameraId === undefined || cameraId === null) {
        throw new Error("Missing the required parameter 'cameraId' when calling cameraInsightsSocialDistancingAverageTotalForDayDateByCameraIdCameraIdGet");
      }

      let pathParams = {
        'date': _date,
        'cameraId': cameraId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TotalCameraSocialDistanceAvg;
      return this.apiClient.callApi(
        '/camera-insights/social-distancing/average/total/for/day/{date}/by/camera/id/{cameraId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} _date Date to retrieve data from.
     * @param {String} cameraId Numeric ID of camera.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TotalCameraSocialDistanceAvg}
     */
    cameraInsightsSocialDistancingAverageTotalForDayDateByCameraIdCameraIdGet(_date, cameraId) {
      return this.cameraInsightsSocialDistancingAverageTotalForDayDateByCameraIdCameraIdGetWithHttpInfo(_date, cameraId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get total average social distancing compliance per day between 2 dates.
     * @param {String} startDate First date to retrieve.
     * @param {String} endDate Last date in range.
     * @param {String} cameraId Numeric ID of camera.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TotalCameraSocialDistanceAvg>} and HTTP response
     */
    cameraInsightsSocialDistancingAverageTotalPerDayBetweenDatesStartStartDateEndEndDateByCameraIdCameraIdGetWithHttpInfo(startDate, endDate, cameraId) {
      let postBody = null;
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling cameraInsightsSocialDistancingAverageTotalPerDayBetweenDatesStartStartDateEndEndDateByCameraIdCameraIdGet");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling cameraInsightsSocialDistancingAverageTotalPerDayBetweenDatesStartStartDateEndEndDateByCameraIdCameraIdGet");
      }
      // verify the required parameter 'cameraId' is set
      if (cameraId === undefined || cameraId === null) {
        throw new Error("Missing the required parameter 'cameraId' when calling cameraInsightsSocialDistancingAverageTotalPerDayBetweenDatesStartStartDateEndEndDateByCameraIdCameraIdGet");
      }

      let pathParams = {
        'startDate': startDate,
        'endDate': endDate,
        'cameraId': cameraId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TotalCameraSocialDistanceAvg];
      return this.apiClient.callApi(
        '/camera-insights/social-distancing/average/total/per/day/between/dates/start/{startDate}/end/{endDate}/by/camera/id/{cameraId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get total average social distancing compliance per day between 2 dates.
     * @param {String} startDate First date to retrieve.
     * @param {String} endDate Last date in range.
     * @param {String} cameraId Numeric ID of camera.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/TotalCameraSocialDistanceAvg>}
     */
    cameraInsightsSocialDistancingAverageTotalPerDayBetweenDatesStartStartDateEndEndDateByCameraIdCameraIdGet(startDate, endDate, cameraId) {
      return this.cameraInsightsSocialDistancingAverageTotalPerDayBetweenDatesStartStartDateEndEndDateByCameraIdCameraIdGetWithHttpInfo(startDate, endDate, cameraId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} _date Date to retrieve data from.
     * @param {Number} interval Interval of data number in range [5 ... 50]
     * @param {String} cameraId Numeric ID of camera.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CameraTimeSpent>} and HTTP response
     */
    cameraInsightsTimeSpentAverageDateMinuteIntervalIntervalByCameraIdCameraIdGetWithHttpInfo(_date, interval, cameraId) {
      let postBody = null;
      // verify the required parameter '_date' is set
      if (_date === undefined || _date === null) {
        throw new Error("Missing the required parameter '_date' when calling cameraInsightsTimeSpentAverageDateMinuteIntervalIntervalByCameraIdCameraIdGet");
      }
      // verify the required parameter 'interval' is set
      if (interval === undefined || interval === null) {
        throw new Error("Missing the required parameter 'interval' when calling cameraInsightsTimeSpentAverageDateMinuteIntervalIntervalByCameraIdCameraIdGet");
      }
      // verify the required parameter 'cameraId' is set
      if (cameraId === undefined || cameraId === null) {
        throw new Error("Missing the required parameter 'cameraId' when calling cameraInsightsTimeSpentAverageDateMinuteIntervalIntervalByCameraIdCameraIdGet");
      }

      let pathParams = {
        'date': _date,
        'interval': interval,
        'cameraId': cameraId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CameraTimeSpent];
      return this.apiClient.callApi(
        '/camera-insights/time-spent/average/{date}/minute/interval/{interval}/by/camera/id/{cameraId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} _date Date to retrieve data from.
     * @param {Number} interval Interval of data number in range [5 ... 50]
     * @param {String} cameraId Numeric ID of camera.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CameraTimeSpent>}
     */
    cameraInsightsTimeSpentAverageDateMinuteIntervalIntervalByCameraIdCameraIdGet(_date, interval, cameraId) {
      return this.cameraInsightsTimeSpentAverageDateMinuteIntervalIntervalByCameraIdCameraIdGetWithHttpInfo(_date, interval, cameraId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} _date Date to retrieve data from.
     * @param {String} cameraId Numeric ID of camera.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TotalCameraTimeSpent} and HTTP response
     */
    cameraInsightsTimeSpentAverageTotalForDayDateByCameraIdCameraIdGetWithHttpInfo(_date, cameraId) {
      let postBody = null;
      // verify the required parameter '_date' is set
      if (_date === undefined || _date === null) {
        throw new Error("Missing the required parameter '_date' when calling cameraInsightsTimeSpentAverageTotalForDayDateByCameraIdCameraIdGet");
      }
      // verify the required parameter 'cameraId' is set
      if (cameraId === undefined || cameraId === null) {
        throw new Error("Missing the required parameter 'cameraId' when calling cameraInsightsTimeSpentAverageTotalForDayDateByCameraIdCameraIdGet");
      }

      let pathParams = {
        'date': _date,
        'cameraId': cameraId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TotalCameraTimeSpent;
      return this.apiClient.callApi(
        '/camera-insights/time-spent/average/total/for/day/{date}/by/camera/id/{cameraId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} _date Date to retrieve data from.
     * @param {String} cameraId Numeric ID of camera.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TotalCameraTimeSpent}
     */
    cameraInsightsTimeSpentAverageTotalForDayDateByCameraIdCameraIdGet(_date, cameraId) {
      return this.cameraInsightsTimeSpentAverageTotalForDayDateByCameraIdCameraIdGetWithHttpInfo(_date, cameraId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get total average time spent for each day between 2 dates.
     * @param {String} startDate First date to retrieve.
     * @param {String} endDate Last date in range.
     * @param {String} cameraId Numeric ID of camera.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TotalCameraTimeSpent>} and HTTP response
     */
    cameraInsightsTimeSpentAverageTotalPerDayBetweenDatesStartStartDateEndEndDateByCameraIdCameraIdGetWithHttpInfo(startDate, endDate, cameraId) {
      let postBody = null;
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling cameraInsightsTimeSpentAverageTotalPerDayBetweenDatesStartStartDateEndEndDateByCameraIdCameraIdGet");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling cameraInsightsTimeSpentAverageTotalPerDayBetweenDatesStartStartDateEndEndDateByCameraIdCameraIdGet");
      }
      // verify the required parameter 'cameraId' is set
      if (cameraId === undefined || cameraId === null) {
        throw new Error("Missing the required parameter 'cameraId' when calling cameraInsightsTimeSpentAverageTotalPerDayBetweenDatesStartStartDateEndEndDateByCameraIdCameraIdGet");
      }

      let pathParams = {
        'startDate': startDate,
        'endDate': endDate,
        'cameraId': cameraId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TotalCameraTimeSpent];
      return this.apiClient.callApi(
        '/camera-insights/time-spent/average/total/per/day/between/dates/start/{startDate}/end/{endDate}/by/camera/id/{cameraId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get total average time spent for each day between 2 dates.
     * @param {String} startDate First date to retrieve.
     * @param {String} endDate Last date in range.
     * @param {String} cameraId Numeric ID of camera.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/TotalCameraTimeSpent>}
     */
    cameraInsightsTimeSpentAverageTotalPerDayBetweenDatesStartStartDateEndEndDateByCameraIdCameraIdGet(startDate, endDate, cameraId) {
      return this.cameraInsightsTimeSpentAverageTotalPerDayBetweenDatesStartStartDateEndEndDateByCameraIdCameraIdGetWithHttpInfo(startDate, endDate, cameraId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Post camera insight
     * @param {Object} opts Optional parameters
     * @param {module:model/CameraInsights} opts.cameraInsights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
     */
    cameraInsightsUploadInsightPostWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['cameraInsights'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/camera-insights/upload-insight', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Post camera insight
     * @param {Object} opts Optional parameters
     * @param {module:model/CameraInsights} opts.cameraInsights 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
     */
    cameraInsightsUploadInsightPost(opts) {
      return this.cameraInsightsUploadInsightPostWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} _date Date to retrieve data from.
     * @param {Number} interval Interval of data number in range [5 ... 50]
     * @param {String} cameraId Numeric ID of camera.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CameraWalkingPace>} and HTTP response
     */
    cameraInsightsWalkingPaceAverageDateMinuteIntervalIntervalByCameraIdCameraIdGetWithHttpInfo(_date, interval, cameraId) {
      let postBody = null;
      // verify the required parameter '_date' is set
      if (_date === undefined || _date === null) {
        throw new Error("Missing the required parameter '_date' when calling cameraInsightsWalkingPaceAverageDateMinuteIntervalIntervalByCameraIdCameraIdGet");
      }
      // verify the required parameter 'interval' is set
      if (interval === undefined || interval === null) {
        throw new Error("Missing the required parameter 'interval' when calling cameraInsightsWalkingPaceAverageDateMinuteIntervalIntervalByCameraIdCameraIdGet");
      }
      // verify the required parameter 'cameraId' is set
      if (cameraId === undefined || cameraId === null) {
        throw new Error("Missing the required parameter 'cameraId' when calling cameraInsightsWalkingPaceAverageDateMinuteIntervalIntervalByCameraIdCameraIdGet");
      }

      let pathParams = {
        'date': _date,
        'interval': interval,
        'cameraId': cameraId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CameraWalkingPace];
      return this.apiClient.callApi(
        '/camera-insights/walking-pace/average/{date}/minute/interval/{interval}/by/camera/id/{cameraId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} _date Date to retrieve data from.
     * @param {Number} interval Interval of data number in range [5 ... 50]
     * @param {String} cameraId Numeric ID of camera.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CameraWalkingPace>}
     */
    cameraInsightsWalkingPaceAverageDateMinuteIntervalIntervalByCameraIdCameraIdGet(_date, interval, cameraId) {
      return this.cameraInsightsWalkingPaceAverageDateMinuteIntervalIntervalByCameraIdCameraIdGetWithHttpInfo(_date, interval, cameraId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} _date Date to retrieve data from.
     * @param {String} cameraId Numeric ID of camera.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TotalCameraWalkingPace} and HTTP response
     */
    cameraInsightsWalkingPaceAverageTotalForDayDateByCameraIdCameraIdGetWithHttpInfo(_date, cameraId) {
      let postBody = null;
      // verify the required parameter '_date' is set
      if (_date === undefined || _date === null) {
        throw new Error("Missing the required parameter '_date' when calling cameraInsightsWalkingPaceAverageTotalForDayDateByCameraIdCameraIdGet");
      }
      // verify the required parameter 'cameraId' is set
      if (cameraId === undefined || cameraId === null) {
        throw new Error("Missing the required parameter 'cameraId' when calling cameraInsightsWalkingPaceAverageTotalForDayDateByCameraIdCameraIdGet");
      }

      let pathParams = {
        'date': _date,
        'cameraId': cameraId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TotalCameraWalkingPace;
      return this.apiClient.callApi(
        '/camera-insights/walking-pace/average/total/for/day/{date}/by/camera/id/{cameraId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} _date Date to retrieve data from.
     * @param {String} cameraId Numeric ID of camera.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TotalCameraWalkingPace}
     */
    cameraInsightsWalkingPaceAverageTotalForDayDateByCameraIdCameraIdGet(_date, cameraId) {
      return this.cameraInsightsWalkingPaceAverageTotalForDayDateByCameraIdCameraIdGetWithHttpInfo(_date, cameraId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get total average walking pace per day between 2 dates.
     * @param {String} startDate First date to retrieve.
     * @param {String} endDate Last date in range.
     * @param {String} cameraId Numeric ID of camera.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TotalCameraWalkingPace>} and HTTP response
     */
    cameraInsightsWalkingPaceAverageTotalPerDayBetweenDatesStartStartDateEndEndDateByCameraIdCameraIdGetWithHttpInfo(startDate, endDate, cameraId) {
      let postBody = null;
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling cameraInsightsWalkingPaceAverageTotalPerDayBetweenDatesStartStartDateEndEndDateByCameraIdCameraIdGet");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling cameraInsightsWalkingPaceAverageTotalPerDayBetweenDatesStartStartDateEndEndDateByCameraIdCameraIdGet");
      }
      // verify the required parameter 'cameraId' is set
      if (cameraId === undefined || cameraId === null) {
        throw new Error("Missing the required parameter 'cameraId' when calling cameraInsightsWalkingPaceAverageTotalPerDayBetweenDatesStartStartDateEndEndDateByCameraIdCameraIdGet");
      }

      let pathParams = {
        'startDate': startDate,
        'endDate': endDate,
        'cameraId': cameraId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TotalCameraWalkingPace];
      return this.apiClient.callApi(
        '/camera-insights/walking-pace/average/total/per/day/between/dates/start/{startDate}/end/{endDate}/by/camera/id/{cameraId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get total average walking pace per day between 2 dates.
     * @param {String} startDate First date to retrieve.
     * @param {String} endDate Last date in range.
     * @param {String} cameraId Numeric ID of camera.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/TotalCameraWalkingPace>}
     */
    cameraInsightsWalkingPaceAverageTotalPerDayBetweenDatesStartStartDateEndEndDateByCameraIdCameraIdGet(startDate, endDate, cameraId) {
      return this.cameraInsightsWalkingPaceAverageTotalPerDayBetweenDatesStartStartDateEndEndDateByCameraIdCameraIdGetWithHttpInfo(startDate, endDate, cameraId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
