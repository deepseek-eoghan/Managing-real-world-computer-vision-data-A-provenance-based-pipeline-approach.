/**
 * Streetseek Server
 * streetseek.server
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CameraInsights model module.
 * @module model/CameraInsights
 * @version 1.0.0
 */
class CameraInsights {
    /**
     * Constructs a new <code>CameraInsights</code>.
     * A camera capture input object.
     * @alias module:model/CameraInsights
     * @param cameraId {Number} 
     * @param startFrameTime {Number} 
     * @param endFrameTime {Number} 
     * @param personCount {Number} 
     * @param personCountRight {Number} 
     * @param personCountLeft {Number} 
     * @param avgPersonSpeed {Number} 
     * @param estTimeSpent {Number} 
     * @param socialDistCompliance {Number} 
     * @param medianDensity {Number} 
     * @param heatmap {Array} 
     */
    constructor(cameraId, startFrameTime, endFrameTime, personCount, personCountRight, personCountLeft, avgPersonSpeed, estTimeSpent, socialDistCompliance, medianDensity, heatmap) { 
        
        CameraInsights.initialize(this, cameraId, startFrameTime, endFrameTime, personCount, personCountRight, personCountLeft, avgPersonSpeed, estTimeSpent, socialDistCompliance, medianDensity, heatmap);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cameraId, startFrameTime, endFrameTime, personCount, personCountRight, personCountLeft, avgPersonSpeed, estTimeSpent, socialDistCompliance, medianDensity, heatmap) { 
        obj['cameraId'] = cameraId;
        obj['startFrameTime'] = startFrameTime;
        obj['endFrameTime'] = endFrameTime;
        obj['personCount'] = personCount;
        obj['personCountRight'] = personCountRight;
        obj['personCountLeft'] = personCountLeft;
        obj['avgPersonSpeed'] = avgPersonSpeed;
        obj['estTimeSpent'] = estTimeSpent;
        obj['socialDistCompliance'] = socialDistCompliance;
        obj['medianDensity'] = medianDensity;
        obj['heatmap'] = heatmap;
    }

    /**
     * Constructs a <code>CameraInsights</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CameraInsights} obj Optional instance to populate.
     * @return {module:model/CameraInsights} The populated <code>CameraInsights</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CameraInsights();

            if (data.hasOwnProperty('cameraId')) {
                obj['cameraId'] = ApiClient.convertToType(data['cameraId'], 'Number');
            }
            if (data.hasOwnProperty('startFrameTime')) {
                obj['startFrameTime'] = ApiClient.convertToType(data['startFrameTime'], 'Number');
            }
            if (data.hasOwnProperty('endFrameTime')) {
                obj['endFrameTime'] = ApiClient.convertToType(data['endFrameTime'], 'Number');
            }
            if (data.hasOwnProperty('personCount')) {
                obj['personCount'] = ApiClient.convertToType(data['personCount'], 'Number');
            }
            if (data.hasOwnProperty('personCountRight')) {
                obj['personCountRight'] = ApiClient.convertToType(data['personCountRight'], 'Number');
            }
            if (data.hasOwnProperty('personCountLeft')) {
                obj['personCountLeft'] = ApiClient.convertToType(data['personCountLeft'], 'Number');
            }
            if (data.hasOwnProperty('avgPersonSpeed')) {
                obj['avgPersonSpeed'] = ApiClient.convertToType(data['avgPersonSpeed'], 'Number');
            }
            if (data.hasOwnProperty('estTimeSpent')) {
                obj['estTimeSpent'] = ApiClient.convertToType(data['estTimeSpent'], 'Number');
            }
            if (data.hasOwnProperty('socialDistCompliance')) {
                obj['socialDistCompliance'] = ApiClient.convertToType(data['socialDistCompliance'], 'Number');
            }
            if (data.hasOwnProperty('medianDensity')) {
                obj['medianDensity'] = ApiClient.convertToType(data['medianDensity'], 'Number');
            }
            if (data.hasOwnProperty('heatmap')) {
                obj['heatmap'] = ApiClient.convertToType(data['heatmap'], Array);
            }
        }
        return obj;
    }


}

/**
 * @member {Number} cameraId
 */
CameraInsights.prototype['cameraId'] = undefined;

/**
 * @member {Number} startFrameTime
 */
CameraInsights.prototype['startFrameTime'] = undefined;

/**
 * @member {Number} endFrameTime
 */
CameraInsights.prototype['endFrameTime'] = undefined;

/**
 * @member {Number} personCount
 */
CameraInsights.prototype['personCount'] = undefined;

/**
 * @member {Number} personCountRight
 */
CameraInsights.prototype['personCountRight'] = undefined;

/**
 * @member {Number} personCountLeft
 */
CameraInsights.prototype['personCountLeft'] = undefined;

/**
 * @member {Number} avgPersonSpeed
 */
CameraInsights.prototype['avgPersonSpeed'] = undefined;

/**
 * @member {Number} estTimeSpent
 */
CameraInsights.prototype['estTimeSpent'] = undefined;

/**
 * @member {Number} socialDistCompliance
 */
CameraInsights.prototype['socialDistCompliance'] = undefined;

/**
 * @member {Number} medianDensity
 */
CameraInsights.prototype['medianDensity'] = undefined;

/**
 * @member {Array} heatmap
 */
CameraInsights.prototype['heatmap'] = undefined;






export default CameraInsights;

